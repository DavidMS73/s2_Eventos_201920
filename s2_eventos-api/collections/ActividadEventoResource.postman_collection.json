{
	"info": {
		"_postman_id": "939791b5-fcd7-46d4-b815-b3888e764e3f",
		"name": "ActividadEventoResource",
		"description": "Colección de pruebas sobre el recurso ActividadEvento",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Crear un evento",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "694741e6-4794-48fd-b32b-d790963ac9b0",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"postman.setGlobalVariable(\"new_id_e\", data.id);",
							"tests[\"No genera error en el Post\"] = responseCode.code === 200;",
							"console.log(data.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"nombre\": \"Concierto\",\n\t\"categoria\": \"Cultural\",\n\t\"descripcion\": \"Evento de música clásica\",\n\t\"fechaInicio\": \"2020-09-07T00:00:00-08:00\",\n\t\"fechaFin\": \"2020-09-11T00:00:00-17:00\",\n\t\"detallesAdicionales\": \"Ninguno\",\n\t\"entradasRestantes\": 800,\n\t\"valor\": 2000\n}\n\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_eventos-api/api/eventos",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_eventos-api",
						"api",
						"eventos"
					]
				},
				"description": "**Release: Ciclo 1**\r\n\r\nCrea un nuevo evento. El Id es inicializado por la BD y se debe ver en la respuesta.\r\nPara la prueba, se guarda el id en una variable que será utilizada en otras peticiones de la colección.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Crear y asociar una actividad a un evento",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d3d859b3-ccb9-4c88-9e78-0610744ee072",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"postman.setGlobalVariable(\"new_id_a1\", data.id);",
							"tests[\"No genera error en el Post\"] = responseCode.code === 200;",
							"console.log(data.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"nombre\": \"Actividad1\",\n\t\"descripcion\": \"La primera actividad\",\n\t\"horaInicio\": \"09:00\",\n\t\"horaFin\": \"17:00\",\n\t\"fecha\": \"2020-09-07T00:00:00-17:00\"\n}"
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_eventos-api/api/eventos/{{new_id_e}}/actividades",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_eventos-api",
						"api",
						"eventos",
						"{{new_id_e}}",
						"actividades"
					]
				},
				"description": "Crea una nueva actividad. El Id es inicializado por la BD y se debe ver en la respuesta. La actividad es asociada al evento creado antes.\r\nPara la prueba, se guarda el id en una variable que será utilizada en otras peticiones de la colección.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Crear y asociar una actividad a un evento 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d3d859b3-ccb9-4c88-9e78-0610744ee072",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"postman.setGlobalVariable(\"new_id_a2\", data.id);",
							"tests[\"No genera error en el Post\"] = responseCode.code === 200;",
							"console.log(data.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"nombre\": \"Actividad2\",\n\t\"descripcion\": \"La segunda actividad\",\n\t\"horaInicio\": \"09:00\",\n\t\"horaFin\": \"16:00\",\n\t\"fecha\": \"2020-09-10T00:00:00-17:00\"\n}"
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_eventos-api/api/eventos/{{new_id_e}}/actividades",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_eventos-api",
						"api",
						"eventos",
						"{{new_id_e}}",
						"actividades"
					]
				},
				"description": "Crea una nueva actividad. El Id es inicializado por la BD y se debe ver en la respuesta. La actividad es asociada al evento creado antes.\r\nPara la prueba, se guarda el id en una variable que será utilizada en otras peticiones de la colección.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Obtener una actividad de un evento",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e7e73fe8-8e21-4eae-a1bf-973c5ccfbfbc",
						"exec": [
							"console.log(responseBody);",
							"var data = JSON.parse(responseBody);",
							"tests[\"No genera error en el Get\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_eventos-api/api/eventos/{{new_id_e}}/actividades/{{new_id_a1}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_eventos-api",
						"api",
						"eventos",
						"{{new_id_e}}",
						"actividades",
						"{{new_id_a1}}"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nConsulta una actividad de un evento en la aplicación. \r\nLa petición no tiene cuerpo.\r\n\r\nSe envía el Id de la actividad y del evento a consultar en la URL de la petición.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Obtener una actividad que no existe de un evento",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9fe51cc4-6ef5-40d2-bc5f-e1200af00028",
						"exec": [
							"tests[\"No se deberia obtener ningun actividad ya que la actividad no existe.\"] = responseCode.code === 404;",
							"let id = pm.variables.get(\"new_id_e\");",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"El recurso /eventos/\"+id+\"/actividades/0 no existe.\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_eventos-api/api/eventos/{{new_id_e}}/actividades/0",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_eventos-api",
						"api",
						"eventos",
						"{{new_id_e}}",
						"actividades",
						"0"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nConsulta una actividad que no existe de un evento en la aplicación.  \r\n\r\nPara la prueba se verifica que se genera el error.\r\n\r\n**Código http esperado: 404**"
			},
			"response": []
		},
		{
			"name": "Obtener las actividades de un evento",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ac01013b-6ea4-474f-adf3-724652d90aa2",
						"exec": [
							"console.log(responseBody);",
							"var data = JSON.parse(responseBody);",
							"tests[\"No genera error en el Get\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_eventos-api/api/eventos/{{new_id_e}}/actividades",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_eventos-api",
						"api",
						"eventos",
						"{{new_id_e}}",
						"actividades"
					]
				},
				"description": "Consulta las actividades de un evento en la aplicación. \r\nLa petición no tiene cuerpo.\r\n\r\nSe envía el Id del evento a consultar en la URL de la petición.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Borrar una actividad",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "528d0e34-f787-4adc-8122-db7409e4df9f",
						"exec": [
							"tests[\"no genera error en el Delete\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_eventos-api/api/eventos/{{new_id_e}}/actividades/{{new_id_a1}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_eventos-api",
						"api",
						"eventos",
						"{{new_id_e}}",
						"actividades",
						"{{new_id_a1}}"
					]
				},
				"description": "Borra la asociación entre una actividad y un evento y borra la actividad. Se envían los ids del evento y de la actividad creados anteriormente.\n\n**Código HTTP esperado: 204**"
			},
			"response": []
		},
		{
			"name": "Borrar una actividad que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "db442b05-4aea-4f64-9db1-a28176069f5e",
						"exec": [
							"tests[\"No se puede borrar una actividad que no existe.\"] = responseCode.code === 404;",
							"let id = pm.variables.get(\"new_id_e\");",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"El recurso /eventos/\"+id+\"/actividades/0 no existe.\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_eventos-api/api/eventos/{{new_id_e}}/actividades/0",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_eventos-api",
						"api",
						"eventos",
						"{{new_id_e}}",
						"actividades",
						"0"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nBorra una actividad que no existe en un evento en la aplicación.  \r\n\r\nPara la prueba se verifica que se genera el error.\r\n\r\n**Código http esperado: 404**"
			},
			"response": []
		},
		{
			"name": "Borrar una actividad 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "528d0e34-f787-4adc-8122-db7409e4df9f",
						"exec": [
							"tests[\"No genera error en el Delete\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_eventos-api/api/eventos/{{new_id_e}}/actividades/{{new_id_a2}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_eventos-api",
						"api",
						"eventos",
						"{{new_id_e}}",
						"actividades",
						"{{new_id_a2}}"
					]
				},
				"description": "Borra la asociación entre una actividad y un evento y borra la actividad. Se envían los ids del evento y de la actividad creados anteriormente.\n\n**Código HTTP esperado: 204**"
			},
			"response": []
		},
		{
			"name": "Borrar un evento",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d403e21b-3da3-4bbc-9b8a-9a2285ec0292",
						"exec": [
							"tests[\"No genera error en el Delete\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_eventos-api/api/eventos/{{new_id_e}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_eventos-api",
						"api",
						"eventos",
						"{{new_id_e}}"
					]
				},
				"description": "**Release: Paso-5**\n\nBorra un evento. Se envía el id del evento creado anteriormente.\n\n**Código HTTP esperado: 204**"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f9cd3dc5-0f0e-4fd2-8cc1-6c7cc18869fa",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "2d28a682-3be7-4527-9ff9-079aaa85342e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}