{
	"info": {
		"_postman_id": "174e266f-31ed-4f3b-9970-025b6d39668b",
		"name": "Lugar",
		"description": "Colección de pruebas sobre el recurso Lugar",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Crear un lugar",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8306096f-5e2c-449d-b827-efe44fbde283",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"postman.setGlobalVariable(\"new_id_l\", data.id);",
							"tests[\"No genera error en el Post\"] = responseCode.code === 200;",
							"console.log(data.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"capacidadAsistentes\": 50,\r\n\t\"ubicacionGeografica\": \"Springfield\",\r\n\t\"nombre\": \"toto\",\r\n\t\"bloque\": \"C\",\r\n\t\"piso\": \"7\",\r\n\t\"salon\": \"C-702\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_eventos-api/api/lugares",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_eventos-api",
						"api",
						"lugares"
					]
				},
				"description": "Crea un nuevo lugar. El Id es inicializado por la BD y se debe ver en la respuesta. Para la prueba, se guarda el id en una variable que será utilizada en otras peticiones de la colección.\r\n\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Crear un lugar 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8306096f-5e2c-449d-b827-efe44fbde283",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"postman.setGlobalVariable(\"new_id_l2\", data.id);",
							"tests[\"No genera error en el Post\"] = responseCode.code === 200;",
							"console.log(data.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"capacidadAsistentes\": 60,\r\n\t\"ubicacionGeografica\": \"South Park\",\r\n\t\"nombre\": \"Cartman\",\r\n\t\"bloque\": \"\",\r\n\t\"piso\": \"\",\r\n\t\"salon\": \"\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_eventos-api/api/lugares",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_eventos-api",
						"api",
						"lugares"
					]
				},
				"description": "Crea un nuevo lugar. El Id es inicializado por la BD y se debe ver en la respuesta. Para la prueba, se guarda el id en una variable que será utilizada en otras peticiones de la colección.\r\n\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Obtener todos los lugares",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a06153d9-53e9-4d1e-a135-badf1b38d4fd",
						"exec": [
							"console.log(responseBody);",
							"var data = JSON.parse(responseBody);",
							"tests[\"No genera error en el Get\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_eventos-api/api/eventos/{{new_id_e}}/lugares",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_eventos-api",
						"api",
						"eventos",
						"{{new_id_e}}",
						"lugares"
					]
				},
				"description": "Consulta todos los lugares de la aplicacion. \r\nLa petición no tiene cuerpo.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Obtener un lugar",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "20acc8ea-cadf-4ea4-b92e-f4d8218ce963",
						"exec": [
							"console.log(responseBody);",
							"var data = JSON.parse(responseBody);",
							"tests[\"No genera error en el Get\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/frontstepbystep-api/api/authors/{{new_id_l}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"frontstepbystep-api",
						"api",
						"authors",
						"{{new_id_l}}"
					]
				},
				"description": "**Release: Paso-5**\r\n\r\nConsulta un lugar de la aplicación.  \r\nLa petición no tiene cuerpo.\r\nSe envía el id del lugar deseado por la URL de la petición.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Obtener un lugar que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "39dc353d-ae0a-41c6-99a5-89218360c4d3",
						"type": "text/javascript",
						"exec": [
							"tests[\"No se deberia obtener un autor con un id que no existe\"] = responseCode.code === 404;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"El recurso /authors/0 no existe.\");"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/frontstepbystep-api/api/authors/0",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"frontstepbystep-api",
						"api",
						"authors",
						"0"
					]
				},
				"description": "\r\n\r\nConsulta un lugar que no existe en la aplicación.  \r\n\r\nPara la prueba se verifica que se genera el error y el mensaje \"El recurso /lugares/0 no existe.\".\r\n\r\n**Código http esperado: 404**"
			},
			"response": []
		},
		{
			"name": "Editar un lugar",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "68dc8b6c-6d16-40b8-8f51-b61db7113074",
						"exec": [
							"console.log(responseBody);",
							"var data = JSON.parse(responseBody);",
							"tests[\"No genera error en el Put\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"capacidadAsistentes\": 120,\r\n\t\"ubicacionGeografica\": \"Springfield\",\r\n\t\"nombre\": \"Homer\",\r\n\t\"bloque\": \"D\",\r\n\t\"piso\": \"7\",\r\n\t\"salon\": \"C-702\"\r\n}"
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_eventos-api/api/lugares/{{new_id_l}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_eventos-api",
						"api",
						"lugares",
						"{{new_id_l}}"
					]
				},
				"description": "Actualiza un lugar existente. \r\nse envía el Id en la URL de la petición.\r\n\r\n**Código http esperado: 200**"
			},
			"response": []
		},
		{
			"name": "Editar un lugar que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "15a70f62-2a66-469a-9ca6-d1125b0c8774",
						"exec": [
							"tests[\"No se deberia actualizar un autor con id que no existe\"] = responseCode.code === 404;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"El recurso /authors/0 no existe.\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"capacidadAsistentes\": 120,\r\n\t\"ubicacionGeografica\": \"Springfield\",\r\n\t\"nombre\": \"Homer\",\r\n\t\"bloque\": \"D\",\r\n\t\"piso\": \"7\",\r\n\t\"salon\": \"C-702\"\r\n}"
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_eventos-api/api/lugares/0",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_eventos-api",
						"api",
						"lugares",
						"0"
					]
				},
				"description": "Actualiza un lugar que no existe. \r\n\r\nPara la prueba se verifica que se genera el error y el mensaje \"El recurso /lugares/0 no existe.\".\r\n\r\n**Código HTTP esperado: 404**"
			},
			"response": []
		},
		{
			"name": "Borrar un lugar",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d403e21b-3da3-4bbc-9b8a-9a2285ec0292",
						"type": "text/javascript",
						"exec": [
							"tests[\"No genera error en el Delete\"] = responseCode.code === 204;"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/frontstepbystep-api/api/authors/{{new_id_a}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"frontstepbystep-api",
						"api",
						"authors",
						"{{new_id_a}}"
					]
				},
				"description": "Borra un lugar. Se envía el id del lugar creado anteriormente.\n\n**Código HTTP esperado: 204**"
			},
			"response": []
		},
		{
			"name": "Borrar un lugar que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c0905623-e468-4838-b24e-56e8402ea65c",
						"exec": [
							"tests[\"No se deberia borrar un autor con un id que no existe\"] = responseCode.code === 404;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"El recurso /authors/0 no existe.\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_eventos-api/api/lugares/0",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_eventos-api",
						"api",
						"lugares",
						"0"
					]
				},
				"description": "Borra un lugar que no existe en la aplicación.  \r\n\r\nPara la prueba se verifica que se genera el error y el mensaje \"El recurso /lugares/0 no existe.\".\r\n\r\n**Código http esperado: 404**"
			},
			"response": []
		},
		{
			"name": "Borrar el lugar 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7db5b212-04c0-43a8-b627-44b62f4b9852",
						"exec": [
							"tests[\"No genera error en el Delete\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{ip}}:{{puerto}}/s2_eventos-api/api/lugares/{{new_id_l2}}",
					"protocol": "http",
					"host": [
						"{{ip}}"
					],
					"port": "{{puerto}}",
					"path": [
						"s2_eventos-api",
						"api",
						"lugares",
						"{{new_id_l2}}"
					]
				},
				"description": "Borra un lugar. Se envía el id del lugar creado anteriormente.\n\n**Código HTTP esperado: 204**"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "6b179cae-f5a2-48c2-b645-ddb930ca5e97",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "1c2a6d95-80a4-4aad-9951-aa89607889d2",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}